// Sistema de sincronização de cores dos cartões
(() => {
  const CardColorSync = {
    observer: null,
    canal: null,
    dados: null,

    init() {
      this.carregarCoresIniciais().then(() => {
        this.inicializarObserver();
        this.configurarCanal();
      });
    },

    inicializarObserver() {
        this.observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                mutation.addedNodes.forEach((node) => {
                    if (node.nodeType === 1) { // elemento HTML
                        const btnDetalhes = node.querySelector?.('.ver-detalhes') || 
                                          (node.classList?.contains('ver-detalhes') ? node : null);
                        if (btnDetalhes) {
                            this.aplicarCores(btnDetalhes);
                        }
                    }
                });
            });
        });

        // Inicia observação do DOM
        this.observer.observe(document.body, { 
            childList: true,
            subtree: true 
        });
    },

    configurarCanal() {
        if ('BroadcastChannel' in window) {
            this.canal = new BroadcastChannel('configuracoes_empresa');
            this.canal.onmessage = (ev) => {
                if (ev.data && ev.data.tipo === 'atualizar_cores') {
                    this.atualizarCores(ev.data);
                }
            };
        }
    },

    async carregarCoresIniciais() {
        try {
            const res = await fetch('/api/getCompanySettings.php');
            const json = await res.json();
            if (json.success && json.data) {
                this.atualizarCores(json.data);
            }
        } catch (e) {
            console.error('Erro ao carregar cores iniciais:', e);
        }
    },

    atualizarCores(data) {
        if (!data) return;
        document.querySelectorAll('.ver-detalhes').forEach(btn => {
            this.aplicarCores(btn, data);
        });
    },

    aplicarCores(elemento, data = null) {
        if (!elemento) return;

        // Remove os event listeners antigos para evitar duplicação
        const oldElement = elemento.cloneNode(true);
        elemento.parentNode.replaceChild(oldElement, elemento);
        elemento = oldElement;

        // Classes padrão que o botão deve ter
        const classesDefault = [
            'text-white',
            'px-4',
            'py-2',
            'rounded-lg',
            'transition',
            'duration-300',
            'ver-detalhes'
        ];

        // Se tem dados das cores da empresa
        if (data && (data.company_color3 || data.company_color2)) {
            // Remove classes do Tailwind para cor
            elemento.classList.remove('bg-blue-600', 'hover:bg-blue-700');
            
            // Define a cor base
            const corBase = data.company_color3 || data.company_color2;
            
            // Aplica cores personalizadas
            elemento.style.backgroundColor = corBase;
            elemento.style.borderColor = corBase;
            elemento.style.color = '#ffffff';

            // Adiciona event listeners para hover
            elemento.addEventListener('mouseenter', () => {
                try {
                    const cor = elemento.style.backgroundColor;
                    if (cor.startsWith('rgb')) {
                        // Extrai os valores RGB
                        const [r, g, b] = cor.match(/\d+/g).map(Number);
                        // Escurece em 20%
                        elemento.style.backgroundColor = `rgb(${Math.max(0, r-51)}, ${Math.max(0, g-51)}, ${Math.max(0, b-51)})`;
                    } else if (cor.startsWith('#')) {
                        // Escurece a cor hex em 20%
                        const num = parseInt(cor.slice(1), 16);
                        const amt = -51; // aproximadamente 20% mais escuro
                        const R = Math.max(0, (num >> 16) + amt);
                        const G = Math.max(0, (num >> 8 & 0x00FF) + amt);
                        const B = Math.max(0, (num & 0x0000FF) + amt);
                        elemento.style.backgroundColor = `#${(1 << 24 | R << 16 | G << 8 | B).toString(16).slice(1)}`;
                    }
                } catch (err) {
                    console.error('Erro ao processar hover:', err);
                }
            });
            
            elemento.addEventListener('mouseleave', () => {
                elemento.style.backgroundColor = corBase;
            });
            
            if (data.company_font) {
                elemento.style.fontFamily = `'${data.company_font}', sans-serif`;
            }
        } else {
            // Remove estilos inline
            elemento.removeAttribute('style');
            
            // Aplica classes padrão do Tailwind
            classesDefault.forEach(classe => {
                elemento.classList.add(classe);
            });
            
            // Adiciona classes de cor padrão
            elemento.classList.add('bg-blue-600', 'hover:bg-blue-700');
        }
    }
  };

  // Inicializa o sistema de sincronização
  document.addEventListener('DOMContentLoaded', () => {
    CardColorSync.init();
  });

  // Expõe função global para gerar botões
  window.gerarBotaoDetalhes = function(id) {
    const classesBase = [
      'ver-detalhes',
      'text-white',
      'px-4',
      'py-2',
      'rounded-lg',
      'transition',
      'duration-300'
    ].join(' ');

    return `<button class="${classesBase} bg-blue-600 hover:bg-blue-700" onclick="abrirModalImovel(${id})">
      <i class="fas fa-search mr-2"></i>Ver Detalhes
    </button>`;
  };
})();
};
